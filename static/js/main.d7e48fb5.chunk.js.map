{"version":3,"sources":["constants/AuthTypes.js","reducers/auth.js","reducers/index.js","views/Public/PublicShow.js","views/Protected/ProtectedShow.js","actions/AuthActions.js","views/SignIn/components/SignInDialog.js","views/SignIn/SignInShow.js","views/Auth/AuthButton.js","App.js","serviceWorker.js","sagas.js","index.js"],"names":["POST_SIGN_IN","REQUEST","SUCCESS","FAILURE","CANCEL","initial","status","isAuthenticated","userName","password","showSignInForm","rootReducer","combineReducers","auth","state","arguments","length","undefined","action","type","Object","objectSpread","userNmae","payload","PublicShow","react_default","a","createElement","React","Component","ProtectedShow","postSignOut","_ref3","asyncToGenerator","regenerator_default","mark","_callee3","dispatch","wrap","_context3","prev","next","stop","_x3","apply","this","useStyles","makeStyles","button","backgroundColor","color","compose","connect","postSignIn","props","classes","_React$useState","useState","_React$useState2","slicedToArray","open","setOpen","_React$useState3","_React$useState4","setUserName","_React$useState5","_React$useState6","setPassword","handleClose","Button","className","onClick","Dialog","aria-labelledby","onClose","DialogTitle","id","DialogContent","TextField","label","value","onChange","event","target","DialogActions","SignInShow","components_SignInDialog","AuthButton","authenticate","cb","setTimeout","signout","App","react_router_dom","style","padding","Auth_AuthButton","to","react_router","exact","path","component","render","console","log","Protected_ProtectedShow","Boolean","window","location","hostname","match","rootSaga","watchRequestLogin","loginFlow","_context","all","_marked","_context2","takeEvery","_marked2","put","t0","ERROR","error","_marked3","sagaMiddleware","createSagaMiddleware","store","createStore","reducer","applyMiddleware","run","ReactDOM","es","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d7e48fb5.chunk.js","sourcesContent":["export const UPDATE_USER_NAME = 'UPDATE_USER_NAME'\nexport const UPDATE_PASSWORD = 'UPDATE_PASSWORD'\nexport const POST_SIGN_OUT = 'POST_SIGN_OUT'\nexport const POST_SIGN_IN = {\n  REQUEST: 'POST_SIGN_IN_REQUEST',\n  SUCCESS: 'POST_SIGN_IN_SUCCESS',\n  FAILURE: 'POST_SIGN_IN_FAILURE',\n  CANCEL: 'POST_SIGN_IN_CANCEL',\n}\nexport const TOGGLE_SIGN_IN_FORM = 'TOGGLE_SIGN_IN_FORM'\n","import {\n  UPDATE_USER_NAME,\n  UPDATE_PASSWORD,\n  POST_SIGN_IN,\n  POST_SIGN_OUT,\n  TOGGLE_SIGN_IN_FORM,\n} from '../constants/AuthTypes.js'\n\nconst initial = {\n  status: null,\n  isAuthenticated: false,\n  userName: null,\n  password: null,\n  showSignInForm: false,\n}\n\nexport default (state = initial, action) => {\n  switch (action.type) {\n    case UPDATE_USER_NAME:\n      return {\n        ...state,\n        userNmae: action.payload,\n      }\n    case UPDATE_PASSWORD:\n      return {\n        ...state,\n        password: action.payload,\n      }\n\n    case POST_SIGN_IN.REQUEST:\n      return {\n        ...state,\n        status: 'request',\n      }\n    case POST_SIGN_IN.SUCCESS:\n      return {\n        ...state,\n        status: 'success',\n        isAuthenticated: true,\n      }\n    case POST_SIGN_IN.FAILURE:\n      return {\n        ...state,\n        status: 'failure',\n      }\n    case POST_SIGN_OUT:\n      return {\n        ...state,\n        isAuthenticated: false,\n      }\n    case TOGGLE_SIGN_IN_FORM:\n      return {\n        ...state,\n        showSignInForm: !state.showSignInForm,\n      }\n    default:\n      return state\n  }\n}\n","import { combineReducers } from 'redux'\nimport auth from './auth.js'\n\nconst rootReducer = combineReducers({\n  auth: auth,\n})\n\nexport default rootReducer\n","import React from 'react'\n\nclass PublicShow extends React.Component {\n  render() {\n    return <div>public</div>\n  }\n}\n\nexport default PublicShow\n","import React from 'react'\n\nclass ProtectedShow extends React.Component {\n  render() {\n    return <div>protected</div>\n  }\n}\n\nexport default ProtectedShow\n","import {\n  UPDATE_USER_NAME,\n  UPDATE_PASSWORD,\n  POST_SIGN_IN,\n  POST_SIGN_OUT,\n  TOGGLE_SIGN_IN_FORM,\n} from '../constants/AuthTypes.js'\n\nexport const updateUserName = name => async dispatch => {\n  dispatch({ type: UPDATE_USER_NAME, payload: name })\n}\n\nexport const updatePassword = pw => async dispatch => {\n  dispatch({ type: UPDATE_PASSWORD, payload: pw })\n}\n\nexport const postSignOut = () => async dispatch => {\n  dispatch({ type: POST_SIGN_OUT })\n}\n\nexport const postSignIn = () => async dispatch => {\n  dispatch({ type: POST_SIGN_IN.REQUEST })\n}\n\nexport const toggleSignInForm = () => async dispatch => {\n  console.log('toggleSignInForm')\n  dispatch({ type: TOGGLE_SIGN_IN_FORM })\n}\n","import React from 'react'\nimport { makeStyles } from '@material-ui/styles'\nimport { compose } from 'redux'\nimport { connect } from 'react-redux'\nimport { postSignIn } from '../../../actions/AuthActions.js'\nimport Button from '@material-ui/core/Button'\nimport Dialog from '@material-ui/core/Dialog'\nimport DialogActions from '@material-ui/core/DialogActions'\nimport DialogContent from '@material-ui/core/DialogContent'\nimport DialogTitle from '@material-ui/core/DialogTitle'\nimport TextField from '@material-ui/core/TextField'\n\nconst useStyles = makeStyles({\n  button: {\n    backgroundColor: 'grey',\n    color: '#f2f2f2',\n  },\n})\n\nconst SignInDialog = props => {\n  const classes = useStyles()\n  const [open, setOpen] = React.useState(false)\n  const [userName, setUserName] = React.useState('')\n  const [password, setPassword] = React.useState('')\n\n  function handleClickOpen() {\n    setOpen(true)\n  }\n\n  function handleClose() {\n    setOpen(false)\n  }\n\n  function handleSetUserName(event) {\n    setUserName(event.target.value)\n  }\n\n  function handleSetPassword(event) {\n    setPassword(event.target.value)\n  }\n\n  return (\n    <div>\n      <Button className={classes.button} onClick={handleClickOpen}>\n        Sign In\n      </Button>\n      <Dialog open={open} aria-labelledby=\"dialog-title\" onClose={handleClose}>\n        <DialogTitle id=\"dialog-title\">Sign In</DialogTitle>\n        <DialogContent>\n          <div>\n            <TextField\n              label=\"Username\"\n              value={userName}\n              onChange={handleSetUserName}\n            />\n          </div>\n          <div>\n            <TextField\n              label=\"Password\"\n              type=\"password\"\n              value={password}\n              onChange={handleSetPassword}\n            />\n          </div>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={handleClose} color=\"secondary\">\n            Cancel\n          </Button>\n          <Button onClick={props.postSignIn} color=\"primary\">\n            Sign In\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </div>\n  )\n}\n\nconst mapStateToProps = state => ({})\n\nconst mapDispatchToProps = dispatch => ({\n  postSignIn: () => dispatch({ type: 'POST_SIGN_IN_REQUEST' }),\n})\n\nexport default compose(\n  connect(\n    mapStateToProps,\n    mapDispatchToProps\n  )\n)(SignInDialog)\n","import React from 'react'\nimport { compose } from 'redux'\nimport { connect } from 'react-redux'\nimport SignInDialog from './components/SignInDialog.js'\n\nclass SignInShow extends React.Component {\n  render() {\n    return (\n      <div>\n        <SignInDialog open={this.props.showSignInForm} />\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = state => ({})\n\nconst mapDispatchToProps = dispatch => ({})\n\nexport default compose(\n  connect(\n    mapStateToProps,\n    mapDispatchToProps\n  )\n)(SignInShow)\n","import React from 'react'\nimport { compose } from 'redux'\nimport { connect } from 'react-redux'\nimport { postSignOut } from '../../actions/AuthActions.js'\n\nclass AuthButton extends React.Component {\n  render() {\n    return this.props.isAuthenticated ? (\n      <p>\n        Welcome!{' '}\n        <button\n          onClick={() => {\n            postSignOut()\n          }}\n        >\n          Sign out\n        </button>\n      </p>\n    ) : (\n      <p>You are not logged in.</p>\n    )\n  }\n}\n\nconst mapStateToProps = state => ({\n  isAuthenticated: state.auth.isAuthenticated,\n})\n\nconst mapDispatchToProps = dispatch => ({\n  postSignOut: () => dispatch(postSignOut()),\n})\n\nexport default compose(\n  connect(\n    mapStateToProps,\n    mapDispatchToProps\n  )\n)(AuthButton)\n","import React from 'react'\nimport { compose } from 'redux'\nimport { connect } from 'react-redux'\nimport {\n  BrowserRouter as Router,\n  Route,\n  Link,\n  Redirect,\n} from 'react-router-dom'\nimport PublicShow from './views/Public/PublicShow'\nimport ProtectedShow from './views/Protected/ProtectedShow'\nimport SignInShow from './views/SignIn/SignInShow'\nimport AuthButton from './views/Auth/AuthButton'\n\nconst auth = {\n  isAuthenticated: false,\n  authenticate(cb) {\n    this.isAuthenticated = true\n    setTimeout(cb, 100) // fake async\n  },\n  signout(cb) {\n    this.isAuthenticated = false\n    setTimeout(cb, 100)\n  },\n}\n\nclass App extends React.Component {\n  render() {\n    return (\n      <Router>\n        <div style={{ padding: '20px' }}>\n          <AuthButton />\n          <ul>\n            <li>\n              <Link to=\"/public\">Public Page</Link>\n            </li>\n            <li>\n              <Link to=\"/protected\">Protected Page</Link>\n            </li>\n          </ul>\n          <hr />\n\n          <Route exact path=\"/\" />\n          <Route path=\"/public\" component={PublicShow} />\n          <Route\n            path=\"/protected\"\n            render={() => {\n              console.log('auth', auth)\n              return auth.isAuthenticated ? (\n                <ProtectedShow />\n              ) : (\n                <Redirect to=\"/signin\" />\n              )\n            }}\n          />\n          <Route path=\"/signin\" component={SignInShow} />\n        </div>\n      </Router>\n    )\n  }\n}\n\nconst mapStateToProps = state => ({\n  userName: state.auth.userName,\n  password: state.auth.password,\n  isAuthenticated: state.auth.isAuthenticated,\n})\n\nconst mapDispatchToProps = dispatch => ({})\n\nexport default compose(\n  connect(\n    mapStateToProps,\n    mapDispatchToProps\n  )\n)(App)\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { delay } from 'redux-saga'\nimport { put, takeEvery, all, call } from 'redux-saga/effects'\nimport {\n  UPDATE_USER_NAME,\n  UPDATE_PASSWORD,\n  POST_SIGN_IN,\n  POST_SIGN_OUT,\n  TOGGLE_SIGN_IN_FORM,\n} from './constants/AuthTypes.js'\n\nexport default function* rootSaga() {\n  yield all[watchRequestLogin()]\n}\n\nexport function* watchRequestLogin() {\n  console.log('saga woohoo')\n  yield takeEvery(POST_SIGN_IN.REQUEST, loginFlow)\n}\n\nexport function* loginFlow(action) {\n  console.log('loginFlow')\n  try {\n    // const response = yield call(loginAPI, {\n    //   username: action.username,\n    //   password: action.password,\n    // })\n    yield put({ type: POST_SIGN_IN.SUCCESS })\n  } catch (error) {\n    yield put({ type: POST_SIGN_IN.ERROR, error })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { BrowserRouter } from 'react-router-dom'\nimport { createStore, applyMiddleware } from 'redux'\nimport { Provider } from 'react-redux'\nimport reducer from './reducers'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\nimport createSagaMiddleware from 'redux-saga'\n\nimport rootSaga from './sagas'\n\nconst sagaMiddleware = createSagaMiddleware()\nconst store = createStore(reducer, applyMiddleware(sagaMiddleware))\nsagaMiddleware.run(rootSaga)\n\nReactDOM.render(\n  <Provider store={store}>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </Provider>,\n  document.getElementById('root')\n)\n\n// ReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}